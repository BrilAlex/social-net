{"version":3,"file":"static/js/102.4b5ca00b.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://social-net-ts-project/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://social-net-ts-project/./src/components/Profile/ProfileInfo/ProfileStatus.module.css?417b","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-net-ts-project/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social-net-ts-project/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://social-net-ts-project/./src/components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.module.css?bb6c","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"profileBackground\":\"ProfileInfo_profileBackground__Bx1Zq\",\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__UNLcY\",\"profileAvatar\":\"ProfileInfo_profileAvatar__zWGnu\",\"profileInfo\":\"ProfileInfo_profileInfo__7AkdH\"};","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatus_status__qYimw\",\"statusText\":\"ProfileStatus_statusText__UT0FH\",\"statusInput\":\"ProfileStatus_statusInput__puiLW\"};","import {ChangeEvent, FC, useEffect, useState} from \"react\";\r\nimport s from \"./ProfileStatus.module.css\";\r\n\r\ntype ProfileStatusPropsType = {\r\n  status: string\r\n  updateStatus: (newStatus: string) => void\r\n};\r\n\r\nexport const ProfileStatus: FC<ProfileStatusPropsType> = (props) => {\r\n  const [status, setStatus] = useState(props.status);\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const changeStatusText = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div className={s.status}>\r\n      {!editMode &&\r\n      <span className={s.statusText} onDoubleClick={activateEditMode}>\r\n          {props.status || \"------\"}\r\n      </span>\r\n      }\r\n      {editMode &&\r\n      <input\r\n        className={s.statusInput}\r\n        value={status}\r\n        onChange={changeStatusText}\r\n        onBlur={deactivateEditMode}\r\n        autoFocus\r\n      />\r\n      }\r\n    </div>\r\n  );\r\n};\r\n","import {ChangeEvent, FC} from \"react\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\nimport defaultProfileBG from \"./../../../assets/images/default_profile_bg.jpg\";\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport defaultAvatar from \"../../../assets/images/man_avatar.png\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\ntype ProfileInfoPropsType = {\r\n  isOwner: boolean\r\n  profile: ProfileType | null\r\n  status: string\r\n  updateStatus: (newStatus: string) => void\r\n  saveAvatar: (file: File) => void\r\n};\r\n\r\nexport const ProfileInfo: FC<ProfileInfoPropsType> = (\r\n  {isOwner, profile, status, updateStatus, saveAvatar}\r\n) => {\r\n  if (!profile) {\r\n    return <Preloader/>;\r\n  }\r\n\r\n  const userAvatarSrc = profile.photos.large || defaultAvatar;\r\n\r\n  const changeProfileAvatarHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.currentTarget.files && e.currentTarget.files.length) {\r\n      saveAvatar(e.currentTarget.files[0]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.profileBackground}>\r\n        <img src={defaultProfileBG} alt={\"Profile background\"}/>\r\n      </div>\r\n      <div className={styles.profileInfoBlock}>\r\n        <div className={styles.profileAvatar}>\r\n          <img src={userAvatarSrc} alt={profile.fullName}/>\r\n          {isOwner && <input type={\"file\"} onChange={changeProfileAvatarHandler}/>}\r\n        </div>\r\n        <div className={styles.profileInfo}>\r\n          <h3>Profile description:</h3>\r\n          <p>Name: {profile.fullName}</p>\r\n          <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n          {profile.aboutMe && <p>About me: {profile.aboutMe}</p>}\r\n          {profile.lookingForAJob ?\r\n            <>\r\n              <p>Looking for a job: Yes</p>\r\n              <p>{profile.lookingForAJobDescription}</p>\r\n            </>\r\n            :\r\n            <p>Looking for a job: No</p>\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__uCZ+H\",\"newPostBlock\":\"MyPosts_newPostBlock__7hqym\",\"postsList\":\"MyPosts_postsList__L7tuz\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__6phKj\",\"itemText\":\"Post_itemText__QqxTt\"};","import React from \"react\";\r\nimport styles from \"./Post.module.css\";\r\nimport manAvatar from \"./../../../../assets/images/man_avatar.png\";\r\n\r\ntype PostPropsType = {\r\n  postText: string\r\n  likesCount: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = (props) => {\r\n  return (\r\n    <div className={styles.item}>\r\n      <img src={manAvatar} alt={\"User Avatar\"}/>\r\n      <div className={styles.itemText}>\r\n        <p>{props.postText}</p>\r\n        <p>Likes: {props.likesCount}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"submitButton\":\"AddNewPostForm_submitButton__e7CF0\"};","import React, {FC} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormControls/FormControls\";\r\nimport styles from \"./AddNewPostForm.module.css\";\r\n\r\nexport type AddNewPostFormDataType = {\r\n  newPostText: string\r\n};\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<AddNewPostFormDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        name={\"newPostText\"}\r\n        component={Textarea}\r\n        placeholder={\"Enter new post text\"}\r\n        validate={[required, maxLength10]}\r\n      />\r\n      <button className={styles.submitButton}>Add post</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm<AddNewPostFormDataType>({form: \"addNewPostForm\"})(AddNewPostForm);\r\n","import React, {memo} from \"react\";\r\nimport styles from \"./MyPosts.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport AddNewPostForm, {AddNewPostFormDataType} from \"./AddNewPostForm/AddNewPostForm\";\r\n\r\nexport const MyPosts: React.FC<MyPostsPropsType> = memo((props) => {\r\n  const postsElements = [...props.posts].reverse().map(p =>\r\n    <Post\r\n      key={p.id}\r\n      postText={p.postText}\r\n      likesCount={p.likesCount}\r\n    />\r\n  );\r\n\r\n  const addNewPost = (formData: AddNewPostFormDataType) => {\r\n    props.addNewPost(formData.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <div className={styles.newPostBlock}>\r\n        <AddNewPostForm onSubmit={addNewPost}/>\r\n      </div>\r\n      <div className={styles.postsList}>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import {MyPosts} from \"./MyPosts\";\r\nimport {addNewPostAC, PostType} from \"../../../redux/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootActionsType, AppStateType} from \"../../../redux/reduxStore\";\r\n\r\ntype MapStateToPropsType = {\r\n  posts: Array<PostType>\r\n};\r\n\r\ntype MapDispatchToPropsType = {\r\n  addNewPost: (newPostText: string) => void\r\n};\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: (action: RootActionsType) => void): MapDispatchToPropsType => {\r\n  return {\r\n    addNewPost: (newPostText: string) => {\r\n      dispatch(addNewPostAC(newPostText));\r\n    },\r\n  };\r\n};\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import {FC} from \"react\";\r\nimport styles from \"./Profile.module.css\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profileReducer\";\r\n\r\ntype ProfilePropsType = {\r\n  isOwner: boolean\r\n  profile: ProfileType | null\r\n  status: string\r\n  updateStatus: (newStatus: string) => void\r\n  saveAvatar: (file: File) => void\r\n};\r\n\r\nexport const Profile: FC<ProfilePropsType> = (props) => {\r\n  return (\r\n    <div className={styles.profilePage}>\r\n      <ProfileInfo\r\n        isOwner={props.isOwner}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        saveAvatar={props.saveAvatar}\r\n      />\r\n      <MyPostsContainer/>\r\n    </div>\r\n  );\r\n};\r\n","import React, {ComponentType} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {\r\n  getUserProfile,\r\n  getUserStatus,\r\n  ProfileType, saveAvatar,\r\n  updateUserStatus\r\n} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n  userID: string\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  authorizedUser_ID: number | null\r\n  isAuth: boolean\r\n};\r\n\r\ntype MapDispatchToPropsType = {\r\n  getUserProfile: (user_ID: number) => void\r\n  getUserStatus: (user_ID: number) => void\r\n  updateUserStatus: (newStatus: string) => void\r\n  saveAvatar: (file: File) => void\r\n};\r\n\r\ntype ProfileContainerPropsType =\r\n  RouteComponentProps<PathParamsType>\r\n  & MapStateToPropsType\r\n  & MapDispatchToPropsType;\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n  refreshProfile() {\r\n    let user_ID: number | null = Number(this.props.match.params.userID);\r\n    if (!user_ID) {\r\n      user_ID = this.props.authorizedUser_ID;\r\n      if (!user_ID) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n\r\n    if (user_ID) {\r\n      this.props.getUserProfile(user_ID);\r\n      this.props.getUserStatus(user_ID);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  };\r\n\r\n  componentDidUpdate(prevProps: ProfileContainerPropsType) {\r\n    if (this.props.match.params.userID !== prevProps.match.params.userID) {\r\n      this.refreshProfile();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {profile, status, updateUserStatus, saveAvatar} = this.props;\r\n    return (\r\n      <Profile\r\n        isOwner={!this.props.match.params.userID}\r\n        profile={profile}\r\n        status={status}\r\n        updateStatus={updateUserStatus}\r\n        saveAvatar={saveAvatar}\r\n      />\r\n    );\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUser_ID: state.auth.user_ID,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose<ComponentType>(\r\n  connect(\r\n    mapStateToProps,\r\n    {getUserProfile, getUserStatus, updateUserStatus, saveAvatar}\r\n  ),\r\n  withRouter,\r\n)(ProfileContainer);\r\n"],"names":["ProfileStatus","props","useState","status","setStatus","editMode","setEditMode","useEffect","className","s","onDoubleClick","value","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","ProfileInfo","isOwner","profile","saveAvatar","Preloader","userAvatarSrc","photos","large","defaultAvatar","styles","src","defaultProfileBG","alt","fullName","type","files","length","aboutMe","lookingForAJob","lookingForAJobDescription","Post","manAvatar","postText","likesCount","maxLength10","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPosts","memo","postsElements","posts","reverse","map","p","id","formData","addNewPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addNewPostAC","Profile","ProfileContainer","user_ID","Number","this","match","params","userID","authorizedUser_ID","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","updateUserStatus","React","compose","auth","isAuth","withRouter"],"sourceRoot":""}