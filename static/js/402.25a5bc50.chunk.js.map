{"version":3,"file":"static/js/402.25a5bc50.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://social-net-ts-project/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://social-net-ts-project/./src/components/Profile/ProfileInfo/ProfileStatus.module.css?417b","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-net-ts-project/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social-net-ts-project/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://social-net-ts-project/./src/components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.module.css?bb6c","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"profileBackground\":\"ProfileInfo_profileBackground__Bx1Zq\",\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__UNLcY\",\"profileAvatar\":\"ProfileInfo_profileAvatar__zWGnu\",\"profileInfo\":\"ProfileInfo_profileInfo__7AkdH\",\"contact\":\"ProfileInfo_contact__LlGr0\"};","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatus_status__qYimw\",\"statusText\":\"ProfileStatus_statusText__UT0FH\",\"statusInput\":\"ProfileStatus_statusInput__puiLW\"};","import {ChangeEvent, FC, useEffect, useState} from \"react\";\r\nimport s from \"./ProfileStatus.module.css\";\r\n\r\ntype ProfileStatusPropsType = {\r\n  status: string\r\n  updateStatus: (newStatus: string) => void\r\n};\r\n\r\nexport const ProfileStatus: FC<ProfileStatusPropsType> = (props) => {\r\n  const [status, setStatus] = useState(props.status);\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const changeStatusText = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div className={s.status}>\r\n      <b>Status: </b>\r\n      {!editMode &&\r\n      <span className={s.statusText} onDoubleClick={activateEditMode}>\r\n          {props.status || \"------\"}\r\n      </span>\r\n      }\r\n      {editMode &&\r\n      <input\r\n        className={s.statusInput}\r\n        value={status}\r\n        onChange={changeStatusText}\r\n        onBlur={deactivateEditMode}\r\n        autoFocus\r\n      />\r\n      }\r\n    </div>\r\n  );\r\n};\r\n","import {FC} from \"react\";\r\nimport {ProfileType} from \"../../../api/api\";\r\nimport {createField, Input, Textarea} from \"../../common/FormControls/FormControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport styles from \"../../Login/Login.module.css\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n  profile: ProfileType\r\n};\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, ProfileDataFormPropsType> & ProfileDataFormPropsType> = (\r\n  {handleSubmit, error, profile}\r\n) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h3>Profile info:</h3>\r\n      {error && <div className={styles.formError}>{error}</div>}\r\n      <div>\r\n        <b>Name</b>:\r\n        {createField(\"fullName\", \"Full name\", [], Input)}\r\n      </div>\r\n      <div>\r\n        <b>About me</b>:\r\n        {createField(\"aboutMe\", \"About me\", [], Textarea)}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>:\r\n        {createField(\"lookingForAJob\", \"About me\", [], Input, {type: \"checkbox\"})}\r\n      </div>\r\n      <div>\r\n        <b>My skills</b>:\r\n        {createField(\"lookingForAJobDescription\", \"My skills\", [], Textarea)}\r\n      </div>\r\n      <div>\r\n        <div><b>Contacts</b></div>\r\n        {Object.keys(profile.contacts).map(key =>\r\n          <div key={key}>\r\n            {key}: {createField(\"contacts.\" + key, key, [], Input)}\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <button>Save</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const ProfileDataFormContainer = reduxForm<ProfileType, ProfileDataFormPropsType>({form: \"editProfileForm\"})(ProfileDataForm);\r\n","import {ChangeEvent, FC, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport defaultProfileBG from \"./../../../assets/images/default_profile_bg.jpg\";\r\nimport {ContactsType, ProfileType} from \"../../../api/api\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport defaultAvatar from \"../../../assets/images/man_avatar.png\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {ProfileDataFormContainer} from \"./ProfileDataForm\";\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n};\r\n\r\nconst Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n  return (\r\n    <p className={s.contact}>{contactTitle}: {contactValue}</p>\r\n  );\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  enableEditMode: () => void\r\n};\r\n\r\nconst ProfileData: FC<ProfileDataPropsType> = ({profile, isOwner, enableEditMode}) => {\r\n  const contactsList = Object.keys(profile.contacts).map(key => {\r\n    const contactValue = profile.contacts[key as keyof ContactsType];\r\n    return <Contact key={key} contactTitle={key} contactValue={contactValue}/>;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h3>Profile info:</h3>\r\n      <div><b>Name</b>: {profile.fullName}</div>\r\n      {profile.aboutMe && <p><b>About me</b>: {profile.aboutMe}</p>}\r\n      <div>\r\n        <p><b>Looking for a job</b>: {profile.lookingForAJob ? \"Yes\" : \"No\"}</p>\r\n        {profile.lookingForAJob && <p><b>My skills</b>: {profile.lookingForAJobDescription}</p>}\r\n      </div>\r\n      <div>\r\n        <p><b>Contacts</b>:</p>\r\n        {contactsList}\r\n      </div>\r\n      {isOwner &&\r\n      <div>\r\n        <button onClick={enableEditMode}>Edit</button>\r\n      </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfileInfoPropsType = {\r\n  isOwner: boolean\r\n  profile: ProfileType | null\r\n  status: string\r\n  updateStatus: (newStatus: string) => void\r\n  saveAvatar: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<{}>\r\n};\r\n\r\nexport const ProfileInfo: FC<ProfileInfoPropsType> = (\r\n  {isOwner, profile, status, updateStatus, saveAvatar, saveProfile}\r\n) => {\r\n  const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader/>;\r\n  }\r\n\r\n  const userAvatarSrc = profile.photos.large || defaultAvatar;\r\n\r\n  const changeProfileAvatarHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.currentTarget.files && e.currentTarget.files.length) {\r\n      saveAvatar(e.currentTarget.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.profileBackground}>\r\n        <img src={defaultProfileBG} alt={\"Profile background\"}/>\r\n      </div>\r\n      <div className={s.profileInfoBlock}>\r\n        <div className={s.profileAvatar}>\r\n          <img src={userAvatarSrc} alt={profile.fullName}/>\r\n          {isOwner && <input type={\"file\"} onChange={changeProfileAvatarHandler}/>}\r\n        </div>\r\n        <div className={s.profileInfo}>\r\n          <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n          {editMode ?\r\n            <ProfileDataFormContainer\r\n              initialValues={profile}\r\n              onSubmit={onSubmit}\r\n              profile={profile}\r\n            />\r\n            :\r\n            <ProfileData\r\n              profile={profile}\r\n              isOwner={isOwner}\r\n              enableEditMode={() => setEditMode(true)}\r\n            />\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__uCZ+H\",\"newPostBlock\":\"MyPosts_newPostBlock__7hqym\",\"postsList\":\"MyPosts_postsList__L7tuz\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__6phKj\",\"itemText\":\"Post_itemText__QqxTt\"};","import React from \"react\";\r\nimport styles from \"./Post.module.css\";\r\nimport manAvatar from \"./../../../../assets/images/man_avatar.png\";\r\n\r\ntype PostPropsType = {\r\n  postText: string\r\n  likesCount: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = (props) => {\r\n  return (\r\n    <div className={styles.item}>\r\n      <img src={manAvatar} alt={\"User Avatar\"}/>\r\n      <div className={styles.itemText}>\r\n        <p>{props.postText}</p>\r\n        <p>Likes: {props.likesCount}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"submitButton\":\"AddNewPostForm_submitButton__e7CF0\"};","import React, {FC} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormControls/FormControls\";\r\nimport styles from \"./AddNewPostForm.module.css\";\r\n\r\nexport type AddNewPostFormDataType = {\r\n  newPostText: string\r\n};\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<AddNewPostFormDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        name={\"newPostText\"}\r\n        component={Textarea}\r\n        placeholder={\"Enter new post text\"}\r\n        validate={[required, maxLength10]}\r\n      />\r\n      <button className={styles.submitButton}>Add post</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm<AddNewPostFormDataType>({form: \"addNewPostForm\"})(AddNewPostForm);\r\n","import React, {memo} from \"react\";\r\nimport styles from \"./MyPosts.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport AddNewPostForm, {AddNewPostFormDataType} from \"./AddNewPostForm/AddNewPostForm\";\r\n\r\nexport const MyPosts: React.FC<MyPostsPropsType> = memo((props) => {\r\n  const postsElements = [...props.posts].reverse().map(p =>\r\n    <Post\r\n      key={p.id}\r\n      postText={p.postText}\r\n      likesCount={p.likesCount}\r\n    />\r\n  );\r\n\r\n  const addNewPost = (formData: AddNewPostFormDataType) => {\r\n    props.addNewPost(formData.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <div className={styles.newPostBlock}>\r\n        <AddNewPostForm onSubmit={addNewPost}/>\r\n      </div>\r\n      <div className={styles.postsList}>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import {MyPosts} from \"./MyPosts\";\r\nimport {addNewPostAC, PostType} from \"../../../redux/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootActionsType, AppStateType} from \"../../../redux/store\";\r\n\r\ntype MapStateToPropsType = {\r\n  posts: Array<PostType>\r\n};\r\n\r\ntype MapDispatchToPropsType = {\r\n  addNewPost: (newPostText: string) => void\r\n};\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: (action: RootActionsType) => void): MapDispatchToPropsType => {\r\n  return {\r\n    addNewPost: (newPostText: string) => {\r\n      dispatch(addNewPostAC(newPostText));\r\n    },\r\n  };\r\n};\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import {FC} from \"react\";\r\nimport styles from \"./Profile.module.css\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../api/api\";\r\n\r\ntype ProfilePropsType = {\r\n  isOwner: boolean\r\n  profile: ProfileType | null\r\n  status: string\r\n  updateStatus: (newStatus: string) => void\r\n  saveAvatar: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<{}>\r\n};\r\n\r\nexport const Profile: FC<ProfilePropsType> = (props) => {\r\n  return (\r\n    <div className={styles.profilePage}>\r\n      <ProfileInfo\r\n        isOwner={props.isOwner}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        saveAvatar={props.saveAvatar}\r\n        saveProfile={props.saveProfile}\r\n      />\r\n      <MyPostsContainer/>\r\n    </div>\r\n  );\r\n};\r\n","import React, {ComponentType} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {\r\n  getUserProfile,\r\n  getUserStatus,\r\n  saveAvatar, saveProfile,\r\n  updateUserStatus\r\n} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../../api/api\";\r\n\r\ntype PathParamsType = {\r\n  userID: string\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  authorizedUser_ID: number | null\r\n  isAuth: boolean\r\n};\r\n\r\ntype MapDispatchToPropsType = {\r\n  getUserProfile: (user_ID: number) => void\r\n  getUserStatus: (user_ID: number) => void\r\n  updateUserStatus: (newStatus: string) => void\r\n  saveAvatar: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<{}>;\r\n};\r\n\r\ntype ProfileContainerPropsType =\r\n  RouteComponentProps<PathParamsType>\r\n  & MapStateToPropsType\r\n  & MapDispatchToPropsType;\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n  refreshProfile() {\r\n    let user_ID: number | null = Number(this.props.match.params.userID);\r\n    if (!user_ID) {\r\n      user_ID = this.props.authorizedUser_ID;\r\n      if (!user_ID) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n\r\n    if (user_ID) {\r\n      this.props.getUserProfile(user_ID);\r\n      this.props.getUserStatus(user_ID);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  };\r\n\r\n  componentDidUpdate(prevProps: ProfileContainerPropsType) {\r\n    if (this.props.match.params.userID !== prevProps.match.params.userID) {\r\n      this.refreshProfile();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {profile, status, updateUserStatus, saveAvatar, saveProfile} = this.props;\r\n    return (\r\n      <Profile\r\n        isOwner={!this.props.match.params.userID}\r\n        profile={profile}\r\n        status={status}\r\n        updateStatus={updateUserStatus}\r\n        saveAvatar={saveAvatar}\r\n        saveProfile={saveProfile}\r\n      />\r\n    );\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUser_ID: state.auth.user_ID,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose<ComponentType>(\r\n  connect(\r\n    mapStateToProps,\r\n    {getUserProfile, getUserStatus, updateUserStatus, saveAvatar, saveProfile}\r\n  ),\r\n  withRouter,\r\n)(ProfileContainer);\r\n"],"names":["ProfileStatus","props","useState","status","setStatus","editMode","setEditMode","useEffect","className","s","onDoubleClick","value","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","ProfileDataFormContainer","reduxForm","form","handleSubmit","error","profile","onSubmit","styles","createField","Input","Textarea","type","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","ProfileData","isOwner","enableEditMode","contactsList","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","onClick","ProfileInfo","saveAvatar","saveProfile","Preloader","userAvatarSrc","photos","large","defaultAvatar","src","defaultProfileBG","alt","files","length","initialValues","formData","then","Post","manAvatar","postText","likesCount","maxLength10","maxLengthCreator","Field","name","component","placeholder","validate","required","MyPosts","memo","postsElements","posts","reverse","p","id","addNewPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addNewPostAC","Profile","ProfileContainer","user_ID","Number","this","match","params","userID","authorizedUser_ID","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","updateUserStatus","React","compose","auth","isAuth","withRouter"],"sourceRoot":""}